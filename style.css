body {
    /* Основной цвет фона */
    background-color: #1a1a2e; 

    /* Код для создания фона с сеткой */
    background-image: 
        linear-gradient(rgba(255, 255, 255, 0.05) 1px, transparent 1px),
        linear-gradient(90deg, rgba(255, 255, 255, 0.05) 1px, transparent 1px);
    background-size: 40px 40px; /* Размер ячейки сетки */
    background-position: center center;

    /* Остальные стили для body */
    color: #e0e0e0;
    font-family: 'Courier New', Courier, monospace;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    margin: 0;
    padding: 20px;
    box-sizing: border-box;
}

.container {
    width: 100%;
    max-width: 600px;
}

.card {
    background-color: #0f0f1a;
    border: 1px solid #333;
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.5);
    overflow: hidden; /* Чтобы внутренние элементы не вылезали за скругленные углы */
}

.card-header {
    background-color: #1c1c2b;
    padding: 10px 15px;
    display: flex;
    align-items: center;
    border-bottom: 1px solid #333;
}

.dot {
    height: 12px;
    width: 12px;
    border-radius: 50%;
    display: inline-block;
    margin-right: 8px;
}

.dot.red { background-color: #ff5f56; }
.dot.yellow { background-color: #ffbd2e; }
.dot.green { background-color: #27c93f; }

.title-text {
    color: #ccc;
    font-weight: bold;
    margin-left: 20px;
}

.card-body {
    padding: 25px;
}

.block {
    border-bottom: 1px solid #2a2a3a;
    padding-bottom: 20px;
    margin-bottom: 20px;
}

.block:last-child {
    border-bottom: none;
    margin-bottom: 0;
    padding-bottom: 0;
}

.block-image {
    width: 100%;
    border-radius: 8px;
    margin-top: 20px; /* Добавлен отступ сверху */
    display: block;
    background-color: #000;
}

.block-title {
    margin: 0 0 10px 0;
    color: #ffffff;
    font-size: 1.2em;
}

.block-description {
    margin: 0 0 20px 0;
    line-height: 1.6;
    color: #b0b0b0;
}

.download-button {
    background-color: #00a8ff;
    color: white;
    border: none;
    padding: 12px 25px;
    border-radius: 8px;
    cursor: pointer;
    font-family: inherit;
    font-size: 1em;
    font-weight: bold;
    transition: background-color 0.3s ease;
    width: 100%;
    box-sizing: border-box;
}

.download-button:hover:not(:disabled) {
    background-color: #007bb5;
}

.download-button:disabled {
    background-color: #444;
    cursor: not-allowed;
    opacity: 0.7;
}

/* --- ДОБАВЛЕННЫЕ СТИЛИ --- */
input[type="password"],
textarea {
    background-color: #1a1a2e;
    border: 1px solid #333;
    color: #e0e0e0;
    padding: 10px;
    border-radius: 6px;
    width: 100%;
    box-sizing: border-box;
    font-family: 'Courier New', Courier, monospace;
    resize: vertical;
    margin-bottom: 15px;
}

textarea {
    height: 120px;
}

.hidden {
    display: none;
}```

---

### Файл 2: `streamer.html` (Страница стримера)

Эта страница теперь использует классы из вашего CSS. Логика JavaScript осталась прежней, но теперь она скрывает и показывает целые блоки для более удобного пошагового процесса.

```html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Streamer Control Panel</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>

<div class="container">
    <div class="card">
        <div class="card-header">
            <span class="dot red"></span>
            <span class="dot yellow"></span>
            <span class="dot green"></span>
            <span class="title-text">./stream_control.sh</span>
        </div>
        <div class="card-body">

            <!-- БЛОК 1: АВТОРИЗАЦИЯ И ЗАПУСК КАМЕРЫ -->
            <div id="step1" class="block">
                <h2 class="block-title">>_ Initialize Stream</h2>
                <p class="block-description">Authenticate to access camera and initiate the peer connection protocol.</p>
                <input type="password" id="password" placeholder="Enter access key...">
                <button id="connectButton" class="download-button">Authenticate & Start Camera</button>
            </div>
            
            <video id="localVideo" class="block-image hidden" autoplay muted playsinline></video>

            <!-- БЛОК 2: СОЗДАНИЕ ПРЕДЛОЖЕНИЯ -->
            <div id="step2" class="block hidden">
                <h2 class="block-title">>_ Generate Offer</h2>
                <p class="block-description">Camera is active. Press the button to generate an SDP offer. Copy it and send to the viewer.</p>
                <button id="createOfferButton" class="download-button">Generate Connection Offer</button>
                <textarea id="offerSdp" readonly class="hidden"></textarea>
            </div>

            <!-- БЛОК 3: ПОЛУЧЕНИЕ ОТВЕТА -->
            <div id="step3" class="block hidden">
                <h2 class="block-title">>_ Finalize Handshake</h2>
                <p class="block-description">Paste the SDP answer received from the viewer below to establish the connection.</p>
                <textarea id="answerSdp" placeholder="Paste viewer's answer here..."></textarea>
                <button id="setAnswerButton" class="download-button">Set Answer & Connect</button>
            </div>

        </div>
    </div>
</div>

<script>
    const PWD_HASH = 'a892b74336a5b219a317968a3ed5808794352f2812224609758fcc607c3a936a';
    let localStream, peerConnection;
    const configuration = { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }] };

    const connectButton = document.getElementById('connectButton');
    const createOfferButton = document.getElementById('createOfferButton');
    const setAnswerButton = document.getElementById('setAnswerButton');
    const passwordInput = document.getElementById('password');
    const localVideo = document.getElementById('localVideo');
    const offerSdpTextarea = document.getElementById('offerSdp');
    const answerSdpTextarea = document.getElementById('answerSdp');

    async function hashString(str) {
        const data = new TextEncoder().encode(str);
        const hashBuffer = await crypto.subtle.digest('SHA-256', data);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    }

    connectButton.addEventListener('click', async () => {
        const enteredHash = await hashString(passwordInput.value);
        if (enteredHash !== PWD_HASH) {
            alert('ACCESS DENIED: Invalid key');
            return;
        }
        connectButton.textContent = 'Authenticating...';
        connectButton.disabled = true;

        try {
            localStream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' }, audio: false });
            localVideo.srcObject = localStream;
            localVideo.classList.remove('hidden');
            document.getElementById('step1').classList.add('hidden');
            document.getElementById('step2').classList.remove('hidden');
        } catch (error) {
            console.error('CAMERA_ERROR:', error);
            alert('ERROR: Camera access denied. Check browser permissions.');
            connectButton.textContent = 'Authenticate & Start Camera';
            connectButton.disabled = false;
        }
    });

    createOfferButton.addEventListener('click', async () => {
        createOfferButton.disabled = true;
        createOfferButton.textContent = 'Generating...';
        peerConnection = new RTCPeerConnection(configuration);
        localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));
        peerConnection.onicecandidate = e => {
            if (e.candidate === null) {
                offerSdpTextarea.value = JSON.stringify(peerConnection.localDescription);
                offerSdpTextarea.classList.remove('hidden');
                document.getElementById('step3').classList.remove('hidden');
                createOfferButton.classList.add('hidden');
            }
        };
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
    });

    setAnswerButton.addEventListener('click', async () => {
        if (!answerSdpTextarea.value) {
            alert('ERROR: Viewer answer cannot be empty.');
            return;
        }
        try {
            await peerConnection.setRemoteDescription(JSON.parse(answerSdpTextarea.value));
            setAnswerButton.disabled = true;
            setAnswerButton.textContent = 'Connection Established';
            setAnswerButton.style.backgroundColor = '#27c93f';
        } catch (error) {
            console.error('ANSWER_ERROR:', error);
            alert('ERROR: Invalid answer format.');
        }
    });
</script>

</body>
</html>